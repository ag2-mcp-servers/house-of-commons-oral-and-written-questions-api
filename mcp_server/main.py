# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:17:09+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import (
    ApiResponseListPublishedWrittenQuestion,
    ApiResponseObject,
    ParametersAnsweringBodyIds,
    ParametersAskingMemberIds,
    ParametersEdmIds,
    ParametersOrderBy,
    ParametersQuestionType,
    ParametersStatuses,
    ParametersUINs,
)

app = MCPProxy(
    contact={
        'email': 'softwareengineering@parliament.uk',
        'name': 'UK Parliament',
        'url': 'https://www.parliament.uk/',
    },
    description='An API that allows querying all tabled oral and written questions, and motions for the House of Commons.',
    title='House of Commons Oral and Written Questions API',
    version='v1',
    servers=[
        {'url': 'http://oralquestionsandmotions-api.parliament.uk'},
        {'url': 'https://oralquestionsandmotions-api.parliament.uk'},
    ],
)


@app.get(
    '/EarlyDayMotion/{id}',
    description=""" Get a single Early Day Motion which has the ID specified. """,
    tags=['early_day_motion_handling'],
)
def published_early_day_motion__get(id: int):
    """
    Returns a single Early Day Motion by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/EarlyDayMotions/list',
    description=""" Get a list of Early Day Motions which meet the specified criteria. Only supports Published and Withdrawn status. """,
    tags=['early_day_motion_handling'],
)
def get__early_day_motions_list(
    parameters_edm_ids: Optional[ParametersEdmIds] = Query(
        None, alias='parameters.edmIds'
    ),
    parameters_u_i_n_with_amendment_suffix: Optional[str] = Query(
        None, alias='parameters.uINWithAmendmentSuffix'
    ),
    parameters_search_term: Optional[str] = Query(None, alias='parameters.searchTerm'),
    parameters_current_status_date_start: Optional[datetime] = Query(
        None, alias='parameters.currentStatusDateStart'
    ),
    parameters_current_status_date_end: Optional[datetime] = Query(
        None, alias='parameters.currentStatusDateEnd'
    ),
    parameters_is_prayer: Optional[bool] = Query(None, alias='parameters.isPrayer'),
    parameters_member_id: Optional[int] = Query(None, alias='parameters.memberId'),
    parameters_include_sponsored_by_member: Optional[bool] = Query(
        None, alias='parameters.includeSponsoredByMember'
    ),
    parameters_tabled_start_date: Optional[datetime] = Query(
        None, alias='parameters.tabledStartDate'
    ),
    parameters_tabled_end_date: Optional[datetime] = Query(
        None, alias='parameters.tabledEndDate'
    ),
    parameters_statuses: Optional[ParametersStatuses] = Query(
        None, alias='parameters.statuses'
    ),
    parameters_order_by: Optional[ParametersOrderBy] = Query(
        None, alias='parameters.orderBy'
    ),
    parameters_skip: Optional[int] = Query(None, alias='parameters.skip'),
    parameters_take: Optional[int] = Query(None, alias='parameters.take'),
):
    """
    Returns a list of Early Day Motions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/oralquestions/list',
    description=""" A list of oral questions meeting the specified criteria. """,
    tags=['oral_question_handling'],
)
def published_oral_question__get(
    parameters_answering_date_start: Optional[datetime] = Query(
        None, alias='parameters.answeringDateStart'
    ),
    parameters_answering_date_end: Optional[datetime] = Query(
        None, alias='parameters.answeringDateEnd'
    ),
    parameters_question_type: Optional[ParametersQuestionType] = Query(
        None, alias='parameters.questionType'
    ),
    parameters_oral_question_time_id: Optional[int] = Query(
        None, alias='parameters.oralQuestionTimeId'
    ),
    parameters_asking_member_ids: Optional[ParametersAskingMemberIds] = Query(
        None, alias='parameters.askingMemberIds'
    ),
    parameters_u_i_ns: Optional[ParametersUINs] = Query(None, alias='parameters.uINs'),
    parameters_answering_body_ids: Optional[ParametersAnsweringBodyIds] = Query(
        None, alias='parameters.answeringBodyIds'
    ),
    parameters_skip: Optional[int] = Query(None, alias='parameters.skip'),
    parameters_take: Optional[int] = Query(None, alias='parameters.take'),
):
    """
    Returns a list of oral questions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/oralquestiontimes/list',
    description=""" A list of oral question times meeting the specified criteria. """,
    tags=['oral_question_handling', 'oral_question_slot_management'],
)
def published_oral_question_time__get(
    parameters_answering_date_start: Optional[datetime] = Query(
        None, alias='parameters.answeringDateStart'
    ),
    parameters_answering_date_end: Optional[datetime] = Query(
        None, alias='parameters.answeringDateEnd'
    ),
    parameters_deadline_date_start: Optional[datetime] = Query(
        None, alias='parameters.deadlineDateStart'
    ),
    parameters_deadline_date_end: Optional[datetime] = Query(
        None, alias='parameters.deadlineDateEnd'
    ),
    parameters_oral_question_time_id: Optional[int] = Query(
        None, alias='parameters.oralQuestionTimeId'
    ),
    parameters_answering_body_ids: Optional[ParametersAnsweringBodyIds] = Query(
        None, alias='parameters.answeringBodyIds'
    ),
    parameters_skip: Optional[int] = Query(None, alias='parameters.skip'),
    parameters_take: Optional[int] = Query(None, alias='parameters.take'),
):
    """
    Returns a list of oral question times
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
