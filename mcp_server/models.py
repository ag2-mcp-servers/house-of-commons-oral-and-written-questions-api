# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:17:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class StatusCode(Enum):
    Continue = 'Continue'
    SwitchingProtocols = 'SwitchingProtocols'
    OK = 'OK'
    Created = 'Created'
    Accepted = 'Accepted'
    NonAuthoritativeInformation = 'NonAuthoritativeInformation'
    NoContent = 'NoContent'
    ResetContent = 'ResetContent'
    PartialContent = 'PartialContent'
    MultipleChoices = 'MultipleChoices'
    Ambiguous = 'Ambiguous'
    MovedPermanently = 'MovedPermanently'
    Moved = 'Moved'
    Found = 'Found'
    Redirect = 'Redirect'
    SeeOther = 'SeeOther'
    RedirectMethod = 'RedirectMethod'
    NotModified = 'NotModified'
    UseProxy = 'UseProxy'
    Unused = 'Unused'
    TemporaryRedirect = 'TemporaryRedirect'
    RedirectKeepVerb = 'RedirectKeepVerb'
    BadRequest = 'BadRequest'
    Unauthorized = 'Unauthorized'
    PaymentRequired = 'PaymentRequired'
    Forbidden = 'Forbidden'
    NotFound = 'NotFound'
    MethodNotAllowed = 'MethodNotAllowed'
    NotAcceptable = 'NotAcceptable'
    ProxyAuthenticationRequired = 'ProxyAuthenticationRequired'
    RequestTimeout = 'RequestTimeout'
    Conflict = 'Conflict'
    Gone = 'Gone'
    LengthRequired = 'LengthRequired'
    PreconditionFailed = 'PreconditionFailed'
    RequestEntityTooLarge = 'RequestEntityTooLarge'
    RequestUriTooLong = 'RequestUriTooLong'
    UnsupportedMediaType = 'UnsupportedMediaType'
    RequestedRangeNotSatisfiable = 'RequestedRangeNotSatisfiable'
    ExpectationFailed = 'ExpectationFailed'
    UpgradeRequired = 'UpgradeRequired'
    InternalServerError = 'InternalServerError'
    NotImplemented = 'NotImplemented'
    BadGateway = 'BadGateway'
    ServiceUnavailable = 'ServiceUnavailable'
    GatewayTimeout = 'GatewayTimeout'
    HttpVersionNotSupported = 'HttpVersionNotSupported'


class MemberForDate(BaseModel):
    Constituency: Optional[str] = None
    ListAs: Optional[str] = None
    MnisId: Optional[int] = None
    Name: Optional[str] = None
    Party: Optional[str] = None
    PartyColour: Optional[str] = None
    PartyId: Optional[int] = None
    PhotoUrl: Optional[str] = None
    PimsId: Optional[int] = None
    Status: Optional[str] = None


class Status(Enum):
    Published = 'Published'
    Withdrawn = 'Withdrawn'


class PublishedEarlyDayMotion(BaseModel):
    AmendmentSuffix: Optional[str] = None
    AmendmentToMotionId: Optional[int] = None
    DateTabled: Optional[datetime] = None
    Id: Optional[int] = None
    MemberId: Optional[int] = None
    MotionText: Optional[str] = None
    PrayingAgainstNegativeStatutoryInstrumentId: Optional[int] = None
    PrimarySponsor: Optional[MemberForDate] = None
    SponsorsCount: Optional[int] = None
    Status_1: Optional[Status] = Field(None, alias='Status')
    StatusDate: Optional[datetime] = None
    StatutoryInstrumentNumber: Optional[int] = None
    StatutoryInstrumentTitle: Optional[str] = None
    StatutoryInstrumentYear: Optional[str] = None
    Title: Optional[str] = None
    UIN: Optional[int] = None
    UINWithAmendmentSuffix: Optional[str] = None


class OrderBy(Enum):
    DateTabledAsc = 'DateTabledAsc'
    DateTabledDesc = 'DateTabledDesc'
    TitleAsc = 'TitleAsc'
    TitleDesc = 'TitleDesc'
    SignatureCountAsc = 'SignatureCountAsc'
    SignatureCountDesc = 'SignatureCountDesc'


class PublishedEarlyDayMotionQueryParameters(BaseModel):
    CurrentStatusDateEnd: Optional[datetime] = Field(
        None,
        description='Early Day Motions where the current status has been set on or before the date provided. Date format YYYY-MM-DD.',
    )
    CurrentStatusDateStart: Optional[datetime] = Field(
        None,
        description='Early Day Motions where the current status has been set on or after the date provided. Date format YYYY-MM-DD.',
    )
    EdmIds: Optional[List[int]] = Field(
        None, description='Early Day Motions with an ID in the list provided.'
    )
    IncludeSponsoredByMember: Optional[bool] = Field(
        None, description='Include Early Day Motions sponsored by Member specified'
    )
    IsPrayer: Optional[bool] = Field(
        None,
        description='Early Day Motions which are a prayer against a Negative Statutory Instrument.',
    )
    MemberId: Optional[int] = Field(
        None, description='Return Early Day Motions tabled by Member with ID provided.'
    )
    OrderBy_1: Optional[OrderBy] = Field(
        None,
        alias='OrderBy',
        description='Order results by date tabled, title or signature count. Default is date tabled.',
    )
    SearchTerm: Optional[str] = Field(
        None,
        description='Early Day Motions where the title includes the search term provided.',
    )
    Skip: Optional[int] = Field(
        None, description='The number of records to skip from the first, default is 0.'
    )
    Statuses: Optional[List[Status]] = Field(
        None,
        description='Early Day Motions where current status is in the selected list.',
    )
    TabledEndDate: Optional[datetime] = Field(
        None,
        description='Early Day Motions where the date tabled is on or before the date provided. Date format YYYY-MM-DD.',
    )
    TabledStartDate: Optional[datetime] = Field(
        None,
        description='Early Day Motions where the date tabled is on or after the date provided. Date format YYYY-MM-DD.',
    )
    Take: Optional[int] = Field(
        None,
        description='The number of records to return, default is 25, maximum is 100.',
    )
    UINWithAmendmentSuffix: Optional[str] = Field(
        None, description='Early Day Motions with an UINWithAmendmentSuffix provided.'
    )


class PublishedEarlyDayMotionSponsor(BaseModel):
    CreatedWhen: Optional[datetime] = None
    Id: Optional[int] = None
    IsWithdrawn: Optional[bool] = None
    Member: Optional[MemberForDate] = None
    MemberId: Optional[int] = None
    SponsoringOrder: Optional[int] = None
    WithdrawnDate: Optional[datetime] = None


class QuestionType(Enum):
    Substantive = 'Substantive'
    Topical = 'Topical'


class Status3(Enum):
    Submitted = 'Submitted'
    Carded = 'Carded'
    Unsaved = 'Unsaved'
    ReadyForShuffle = 'ReadyForShuffle'
    ToBeAsked = 'ToBeAsked'
    ShuffleUnsuccessful = 'ShuffleUnsuccessful'
    Withdrawn = 'Withdrawn'
    Unstarred = 'Unstarred'
    Draft = 'Draft'
    ForReview = 'ForReview'
    Unasked = 'Unasked'
    Transferred = 'Transferred'


class PublishedOralQuestion(BaseModel):
    AnsweringBody: Optional[str] = None
    AnsweringBodyId: Optional[int] = None
    AnsweringMinister: Optional[MemberForDate] = None
    AnsweringMinisterId: Optional[int] = None
    AnsweringMinisterTitle: Optional[str] = None
    AnsweringWhen: Optional[datetime] = None
    AskingMember: Optional[MemberForDate] = None
    AskingMemberId: Optional[int] = None
    DeclarableInterestDetail: Optional[str] = None
    HansardLink: Optional[str] = None
    Id: Optional[int] = None
    Number: Optional[int] = None
    QuestionText: Optional[str] = None
    QuestionType_1: Optional[QuestionType] = Field(None, alias='QuestionType')
    RemovedFromToBeAskedWhen: Optional[datetime] = None
    Status: Optional[Status3] = None
    TabledWhen: Optional[datetime] = None
    UIN: Optional[int] = None


class PublishedOralQuestionQueryParameters(BaseModel):
    AnsweringBodyIds: Optional[List[int]] = Field(
        None,
        description='Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.',
    )
    AnsweringDateEnd: Optional[datetime] = Field(
        None,
        description='Oral Questions where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.',
    )
    AnsweringDateStart: Optional[datetime] = Field(
        None,
        description='Oral Questions where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.',
    )
    AskingMemberIds: Optional[List[int]] = Field(
        None,
        description='The ID of the member asking the question. Lists of member IDs for each house are available <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Commons" target="_blank">Commons</a> and <a href="http://data.parliament.uk/membersdataplatform/services/mnis/members/query/house=Lords" target="_blank">Lords</a>.',
    )
    OralQuestionTimeId: Optional[int] = Field(
        None,
        description='Oral Questions where the question is within the question time with the ID provided',
    )
    QuestionType_1: Optional[QuestionType] = Field(
        None,
        alias='QuestionType',
        description='Oral Questions where the question type is the selected type, substantive or topical.',
    )
    Skip: Optional[int] = Field(
        None, description='The number of records to skip from the first, default is 0.'
    )
    Take: Optional[int] = Field(
        None,
        description='The number of records to return, default is 25, maximum is 100.',
    )
    UINs: Optional[List[int]] = Field(
        None,
        description='The UIN for the question - note that UINs reset at the start of each Parliamentary session.',
    )


class PublishedOralQuestionTime(BaseModel):
    AnsweringBodyNames: Optional[str] = None
    AnsweringMinisterTitles: Optional[str] = None
    AnsweringWhen: Optional[datetime] = None
    DeadlineWhen: Optional[datetime] = None
    Id: Optional[int] = None
    SubstantiveTime: Optional[str] = None
    TopicalTime: Optional[str] = None


class PublishedOralQuestionTimeQueryParameters(BaseModel):
    AnsweringBodyIds: Optional[List[int]] = Field(
        None,
        description='Which answering body is to respond. A list of answering bodies can be found <a target="_blank" href="http://data.parliament.uk/membersdataplatform/services/mnis/referencedata/AnsweringBodies/">here</a>.',
    )
    AnsweringDateEnd: Optional[datetime] = Field(
        None,
        description='Oral Questions Time where the answering date has been set on or before the date provided. Date format YYYY-MM-DD.',
    )
    AnsweringDateStart: Optional[datetime] = Field(
        None,
        description='Oral Questions Time where the answering date has been set on or after the date provided. Date format YYYY-MM-DD.',
    )
    DeadlineDateEnd: Optional[datetime] = Field(
        None,
        description='Oral Questions Time where the deadline date has been set on or before the date provided. Date format YYYY-MM-DD.',
    )
    DeadlineDateStart: Optional[datetime] = Field(
        None,
        description='Oral Questions Time where the deadline date has been set on or after the date provided. Date format YYYY-MM-DD.',
    )
    OralQuestionTimeId: Optional[int] = Field(None, description='Identifier of the OQT')
    Skip: Optional[int] = Field(
        None, description='The number of records to skip from the first, default is 0.'
    )
    Take: Optional[int] = Field(
        None,
        description='The number of records to return, default is 25, maximum is 100.',
    )


class QuestionType2(Enum):
    NamedDay = 'NamedDay'
    Ordinary = 'Ordinary'


class PublishedWrittenQuestion(BaseModel):
    Answer: Optional[str] = None
    AnsweredWhen: Optional[datetime] = None
    AnsweringBody: Optional[str] = None
    AnsweringBodyId: Optional[int] = None
    AnsweringMinister: Optional[MemberForDate] = None
    AnsweringMinisterId: Optional[int] = None
    AnsweringMinisterTitle: Optional[str] = None
    AskingMember: Optional[MemberForDate] = None
    AskingMemberId: Optional[int] = None
    DueForAnswer: Optional[datetime] = None
    Id: Optional[int] = None
    QuestionText: Optional[str] = None
    QuestionType: Optional[QuestionType2] = None
    TabledWhen: Optional[datetime] = None
    UIN: Optional[int] = None


class StatusCount(BaseModel):
    Count: Optional[int] = None
    StatusId: Optional[int] = None


class ParametersStatus(Enum):
    Published = 'Published'
    Withdrawn = 'Withdrawn'


class ParametersOrderBy(Enum):
    DateTabledAsc = 'DateTabledAsc'
    DateTabledDesc = 'DateTabledDesc'
    TitleAsc = 'TitleAsc'
    TitleDesc = 'TitleDesc'
    SignatureCountAsc = 'SignatureCountAsc'
    SignatureCountDesc = 'SignatureCountDesc'


class ParametersEdmIds(RootModel[List[int]]):
    root: List[int]


class ParametersStatuses(RootModel[List[ParametersStatus]]):
    root: List[ParametersStatus]


class ParametersQuestionType(Enum):
    Substantive = 'Substantive'
    Topical = 'Topical'


class ParametersAskingMemberIds(RootModel[List[int]]):
    root: List[int]


class ParametersUINs(RootModel[List[int]]):
    root: List[int]


class ParametersAnsweringBodyIds(RootModel[List[int]]):
    root: List[int]


class PagingInfo(BaseModel):
    GlobalStatusCounts: Optional[List[StatusCount]] = None
    GlobalTotal: Optional[int] = None
    Skip: Optional[int] = None
    StatusCounts: Optional[List[StatusCount]] = None
    Take: Optional[int] = None
    Total: Optional[int] = None


class PublishedEarlyDayMotionDetails(BaseModel):
    AmendmentSuffix: Optional[str] = None
    AmendmentToMotionId: Optional[int] = None
    Amendments: Optional[List[PublishedEarlyDayMotionDetails]] = None
    DateTabled: Optional[datetime] = None
    Id: Optional[int] = None
    MemberId: Optional[int] = None
    MotionText: Optional[str] = None
    PrayingAgainstNegativeStatutoryInstrumentId: Optional[int] = None
    PrimarySponsor: Optional[MemberForDate] = None
    Sponsors: Optional[List[PublishedEarlyDayMotionSponsor]] = None
    SponsorsCount: Optional[int] = None
    Status_1: Optional[Status] = Field(None, alias='Status')
    StatusDate: Optional[datetime] = None
    StatutoryInstrumentNumber: Optional[int] = None
    StatutoryInstrumentTitle: Optional[str] = None
    StatutoryInstrumentYear: Optional[str] = None
    Title: Optional[str] = None
    UIN: Optional[int] = None
    UINWithAmendmentSuffix: Optional[str] = None


class ApiResponseListPublishedEarlyDayMotion(BaseModel):
    Errors: Optional[List[str]] = None
    PagingInfo_1: Optional[PagingInfo] = Field(None, alias='PagingInfo')
    Response: Optional[List[PublishedEarlyDayMotion]] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Success: Optional[bool] = None


class ApiResponseListPublishedOralQuestionTime(BaseModel):
    Errors: Optional[List[str]] = None
    PagingInfo_1: Optional[PagingInfo] = Field(None, alias='PagingInfo')
    Response: Optional[List[PublishedOralQuestionTime]] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Success: Optional[bool] = None


class ApiResponseListPublishedOralQuestion(BaseModel):
    Errors: Optional[List[str]] = None
    PagingInfo_1: Optional[PagingInfo] = Field(None, alias='PagingInfo')
    Response: Optional[List[PublishedOralQuestion]] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Success: Optional[bool] = None


class ApiResponseListPublishedWrittenQuestion(BaseModel):
    Errors: Optional[List[str]] = None
    PagingInfo_1: Optional[PagingInfo] = Field(None, alias='PagingInfo')
    Response: Optional[List[PublishedWrittenQuestion]] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Success: Optional[bool] = None


class ApiResponseObject(BaseModel):
    Errors: Optional[List[str]] = None
    PagingInfo_1: Optional[PagingInfo] = Field(None, alias='PagingInfo')
    Response: Optional[Dict[str, Any]] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Success: Optional[bool] = None


class ApiResponsePublishedEarlyDayMotionDetails(BaseModel):
    Errors: Optional[List[str]] = None
    PagingInfo_1: Optional[PagingInfo] = Field(None, alias='PagingInfo')
    Response: Optional[PublishedEarlyDayMotionDetails] = None
    StatusCode_1: Optional[StatusCode] = Field(None, alias='StatusCode')
    Success: Optional[bool] = None


PublishedEarlyDayMotionDetails.model_rebuild()
